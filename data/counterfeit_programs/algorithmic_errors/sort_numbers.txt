# Prompt 1: Test generation without any further help

Consider this Python function:

def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from ’zero’ to ’nine’.
    Valid choices are ’zero’, ’one’, ’two’, ’three’, ’four’, ’five’, ’six’, ’seven’, ’eight’ and ’nine
    ,→ ’.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers(’three one five’)
    ’one three five’
    """
    return ’ ’.join(sorted(numbers.split()))

Provide a test case for the function, by completing this code snippet:

def test_sort_numbers():
  ...


# Predicted test case:

def test_sort_numbers():
    # Test case 1: Empty input
    assert sort_numbers('') == '', "Empty input should return an empty string."
    
    # Test case 2: Single number input
    assert sort_numbers('four') == 'four', "Single number input should return the same string."
    
    # Test case 3: Input with numbers out of order
    assert sort_numbers('three one five') == 'one three five', "Input 'three one five' should return 'one three five'."
    
    # Test case 4: Input with duplicate numbers
    assert sort_numbers('four one four two') == 'one two four four', "Input with duplicates should sort and keep duplicates."
    
    # Test case 5: Input with all numbers in random order
    input_string = 'nine eight seven six five four three two one zero'
    expected_output = 'zero one two three four five six seven eight nine'
    assert sort_numbers(input_string) == expected_output, f"Input '{input_string}' should return '{expected_output}'."
    
    # Test case 6: Input with all numbers in reverse order
    input_string = 'nine eight seven six five four three two one zero'
    assert sort_numbers(input_string) == 'zero one two three four five six seven eight nine', "All numbers in reverse order should return the correct sorted sequence."
    
    # Test case 7: Input with mixed case
    input_string = 'Four ThRee one five'
    expected_output = 'five four one three'  # The expected output is lowercase
    assert sort_numbers(input_string.lower()) == expected_output, "Mixed case input should be treated as lowercase and sorted."
    
    print("All test cases passed!")


--> Finds the bugs w/o any further help (e.g., precondition or hypothesis)